"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDynamicStyles = exports.useDynamicWebStyles = exports.setupDynamicWarning = exports.DynamicStyleOptionsContext = void 0;
const react_native_1 = require("react-native");
const React = __importStar(require("react"));
const react_1 = require("react");
const DynamicStyleProcessor_1 = require("./DynamicStyleProcessor");
const WebStylePrecedanceProcessor_1 = require("./WebStylePrecedanceProcessor");
exports.DynamicStyleOptionsContext = React.createContext({ vars: {} });
const setupDynamicWarning = () => {
    let hasWarned = false;
    react_native_1.StyleSheet.setStyleAttributePreprocessor("__dynamic", () => {
        if (!hasWarned) {
            hasWarned = true;
            console.warn("[react-native-css-modules] Unprocessed style added to element");
        }
        return undefined;
    });
};
exports.setupDynamicWarning = setupDynamicWarning;
const useDynamicWebStyles = () => {
    return (0, react_1.useCallback)((style) => {
        return (0, WebStylePrecedanceProcessor_1.processWebStylePrecedence)(style);
    }, []);
};
exports.useDynamicWebStyles = useDynamicWebStyles;
const useDynamicStyles = () => {
    if (react_native_1.Platform.OS === "web") {
        return (0, exports.useDynamicWebStyles)();
    }
    const { vars, baseFontSize } = (0, react_1.useContext)(exports.DynamicStyleOptionsContext);
    return (0, react_1.useCallback)((style) => {
        if (!style) {
            return style;
        }
        return (0, DynamicStyleProcessor_1.processDynamicStyles)(style, {
            vars,
            baseFontSize
        }).result;
    }, []);
};
exports.useDynamicStyles = useDynamicStyles;
