"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fontFamily_1 = __importDefault(require("./fontFamily"));
const tokenTypes_1 = require("../tokenTypes");
const NORMAL = (0, tokenTypes_1.regExpToken)(/^(normal)$/);
const STYLE = (0, tokenTypes_1.regExpToken)(/^(italic)$/);
const WEIGHT = (0, tokenTypes_1.regExpToken)(/^([1-9]00|bold)$/);
const VARIANT = (0, tokenTypes_1.regExpToken)(/^(small-caps)$/);
const defaultFontStyle = 'normal';
const defaultFontWeight = 'normal';
const defaultFontVariant = [];
exports.default = tokenStream => {
    let fontStyle;
    let fontWeight;
    let fontVariant;
    // let fontSize;
    let lineHeight;
    // let fontFamily;
    let numStyleWeightVariantMatched = 0;
    while (numStyleWeightVariantMatched < 3 && tokenStream.hasTokens()) {
        if (tokenStream.matches(NORMAL)) {
            /* pass */
        }
        else if (fontStyle === undefined && tokenStream.matches(STYLE)) {
            fontStyle = tokenStream.lastValue;
        }
        else if (fontWeight === undefined && tokenStream.matches(WEIGHT)) {
            fontWeight = tokenStream.lastValue;
        }
        else if (fontVariant === undefined && tokenStream.matches(VARIANT)) {
            fontVariant = [tokenStream.lastValue];
        }
        else {
            break;
        }
        tokenStream.expect(tokenTypes_1.SPACE);
        numStyleWeightVariantMatched += 1;
    }
    const fontSize = tokenStream.expect(tokenTypes_1.LENGTH, tokenTypes_1.UNSUPPORTED_LENGTH_UNIT);
    if (tokenStream.matches(tokenTypes_1.SLASH)) {
        lineHeight = tokenStream.expect(tokenTypes_1.LENGTH, tokenTypes_1.UNSUPPORTED_LENGTH_UNIT);
    }
    tokenStream.expect(tokenTypes_1.SPACE);
    const { fontFamily } = (0, fontFamily_1.default)(tokenStream);
    if (fontStyle === undefined)
        fontStyle = defaultFontStyle;
    if (fontWeight === undefined)
        fontWeight = defaultFontWeight;
    if (fontVariant === undefined)
        fontVariant = defaultFontVariant;
    const out = { fontStyle, fontWeight, fontVariant, fontSize, fontFamily };
    if (lineHeight !== undefined)
        out.lineHeight = lineHeight;
    return out;
};
