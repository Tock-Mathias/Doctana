"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tokenTypes_1 = require("../tokenTypes");
const defaultFlexGrow = 1;
const defaultFlexShrink = 1;
const defaultFlexBasis = 0;
exports.default = tokenStream => {
    let flexGrow;
    let flexShrink;
    let flexBasis;
    if (tokenStream.matches(tokenTypes_1.NONE)) {
        tokenStream.expectEmpty();
        return { flexGrow: 0, flexShrink: 0, flexBasis: 'auto' };
    }
    tokenStream.saveRewindPoint();
    if (tokenStream.matches(tokenTypes_1.AUTO) && !tokenStream.hasTokens()) {
        return { flexGrow: 1, flexShrink: 1, flexBasis: 'auto' };
    }
    tokenStream.rewind();
    let partsParsed = 0;
    while (partsParsed < 2 && tokenStream.hasTokens()) {
        if (partsParsed !== 0)
            tokenStream.expect(tokenTypes_1.SPACE);
        if (flexGrow === undefined && tokenStream.matches(tokenTypes_1.NUMBER)) {
            flexGrow = tokenStream.lastValue;
            tokenStream.saveRewindPoint();
            if (tokenStream.matches(tokenTypes_1.SPACE) && tokenStream.matches(tokenTypes_1.NUMBER)) {
                flexShrink = tokenStream.lastValue;
            }
            else {
                tokenStream.rewind();
            }
        }
        else if (flexBasis === undefined &&
            tokenStream.matches(tokenTypes_1.LENGTH, tokenTypes_1.UNSUPPORTED_LENGTH_UNIT, tokenTypes_1.PERCENT)) {
            flexBasis = tokenStream.lastValue;
        }
        else if (flexBasis === undefined && tokenStream.matches(tokenTypes_1.AUTO)) {
            flexBasis = 'auto';
        }
        else {
            tokenStream.throw();
        }
        partsParsed += 1;
    }
    tokenStream.expectEmpty();
    if (flexGrow === undefined)
        flexGrow = defaultFlexGrow;
    if (flexShrink === undefined)
        flexShrink = defaultFlexShrink;
    if (flexBasis === undefined)
        flexBasis = defaultFlexBasis;
    return { flexGrow, flexShrink, flexBasis };
};
