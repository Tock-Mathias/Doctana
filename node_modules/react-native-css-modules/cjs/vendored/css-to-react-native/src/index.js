"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPropertyName = exports.getStylesForProperty = exports.transformRawValue = void 0;
/* eslint-disable no-param-reassign */
const postcss_value_parser_1 = __importDefault(require("postcss-value-parser"));
const camelize_1 = __importDefault(require("camelize"));
const index_1 = __importDefault(require("./transforms/index"));
const devPropertiesWithoutUnitsRegExp_1 = __importDefault(require("./devPropertiesWithoutUnitsRegExp"));
const TokenStream_1 = __importDefault(require("./TokenStream"));
const utils_1 = require("./utils");
// Note if this is wrong, you'll need to change tokenTypes.js too
const numberOrLengthRe = /^([+-]?(?:\d*\.)?\d+(?:e[+-]?\d+)?)(?:px)?$/i;
const numberOnlyRe = /^[+-]?(?:\d*\.\d*|[1-9]\d*)(?:e[+-]?\d+)?$/i;
const boolRe = /^true|false$/i;
const nullRe = /^null$/i;
const undefinedRe = /^undefined$/i;
// Undocumented export
const transformRawValue = (propName, value) => {
    if (process.env.NODE_ENV !== 'production') {
        const needsUnit = !devPropertiesWithoutUnitsRegExp_1.default.test(propName);
        const isNumberWithoutUnit = numberOnlyRe.test(value);
        if (needsUnit && isNumberWithoutUnit) {
            // eslint-disable-next-line no-console
            console.warn(`Expected style "${propName}: ${value}" to contain units`);
        }
        if (!needsUnit && value !== '0' && !isNumberWithoutUnit) {
            // eslint-disable-next-line no-console
            console.warn(`Expected style "${propName}: ${value}" to be unitless`);
        }
    }
    const ast = (0, postcss_value_parser_1.default)(value);
    const varName = (0, utils_1.extractVarFromNodes)(ast.nodes);
    if (varName) {
        return { var: varName };
    }
    const numberMatch = value.match(numberOrLengthRe);
    if (numberMatch !== null)
        return Number(numberMatch[1]);
    const boolMatch = value.match(boolRe);
    if (boolMatch !== null)
        return boolMatch[0].toLowerCase() === 'true';
    const nullMatch = value.match(nullRe);
    if (nullMatch !== null)
        return null;
    const undefinedMatch = value.match(undefinedRe);
    if (undefinedMatch !== null)
        return undefined;
    return value;
};
exports.transformRawValue = transformRawValue;
const baseTransformShorthandValue = (propName, value) => {
    const ast = (0, postcss_value_parser_1.default)(value);
    const tokenStream = new TokenStream_1.default(ast.nodes);
    return index_1.default[propName](tokenStream);
};
const transformShorthandValue = process.env.NODE_ENV === 'production'
    ? baseTransformShorthandValue
    : (propName, value) => {
        try {
            return baseTransformShorthandValue(propName, value);
        }
        catch (e) {
            throw new Error(`Failed to parse declaration "${propName}: ${value}"`);
        }
    };
const getStylesForProperty = (propName, inputValue, allowShorthand) => {
    const isRawValue = allowShorthand === false || !(propName in index_1.default);
    const value = inputValue.trim();
    const propValues = isRawValue
        ? { [propName]: (0, exports.transformRawValue)(propName, value) }
        : transformShorthandValue(propName, value);
    return propValues;
};
exports.getStylesForProperty = getStylesForProperty;
const getPropertyName = propName => {
    const isCustomProp = /^--\w+/.test(propName);
    if (isCustomProp) {
        return propName;
    }
    return (0, camelize_1.default)(propName);
};
exports.getPropertyName = getPropertyName;
exports.default = (rules, shorthandBlacklist = []) => rules.reduce((accum, rule) => {
    const propertyName = (0, exports.getPropertyName)(rule[0]);
    const value = rule[1];
    const allowShorthand = shorthandBlacklist.indexOf(propertyName) === -1;
    return Object.assign(accum, (0, exports.getStylesForProperty)(propertyName, value, allowShorthand));
}, {});
