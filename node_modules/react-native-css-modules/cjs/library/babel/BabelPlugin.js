"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ReactNativeStylesGenerator_1 = require("../shared/ReactNativeStylesGenerator");
const p = __importStar(require("path"));
const fs_1 = __importDefault(require("fs"));
const OUTPUT_DIR_NAME = "dist";
const matchExtensions = matcher([".scss", ".css"]);
function matcher(extensions = [".css"]) {
    const extensionsPattern = extensions.join("|").replace(/\./g, "\\.");
    return new RegExp(`(${extensionsPattern})$`, "i");
}
function resolveModulePath(filename) {
    const dir = p.dirname(filename);
    if (p.isAbsolute(dir)) {
        return dir;
    }
    if (process.env.PWD) {
        return p.resolve(process.env.PWD, dir);
    }
    return p.resolve(dir);
}
function requireCssFile(filepath, cssFile) {
    let filePathOrModuleName = cssFile;
    // only resolve path to file when we have a file path
    if (!/^\w/i.test(filePathOrModuleName)) {
        const from = resolveModulePath(filepath);
        filePathOrModuleName = p.resolve(from, filePathOrModuleName);
    }
    const resolvedPath = require.resolve(filePathOrModuleName);
    return [fs_1.default.readFileSync(resolvedPath).toString("utf-8"), resolvedPath];
}
const outputDir = (state) => {
    const outDir = p.resolve(OUTPUT_DIR_NAME, p.relative(p.resolve(state.file.opts.root, "src"), p.dirname(state.file.opts.filename)));
    if (!fs_1.default.existsSync(outDir)) {
        fs_1.default.mkdirSync(outDir, { recursive: true });
    }
    return outDir;
};
function babelPluginReactNativeCssModules() {
    return {
        visitor: {
            // import styles from './style.css';
            ImportDefaultSpecifier(path, state) {
                const { value } = path.parentPath.node.source;
                if (matchExtensions.test(value)) {
                    const requiringFile = state.file.opts.filename;
                    const [fileContents, filePath] = requireCssFile(requiringFile, value);
                    // move all nested rules to the top level
                    const { css, styles } = (0, ReactNativeStylesGenerator_1.generateReactNativeStyles)({ filename: filePath, src: fileContents });
                    const componentName = p.basename(value).split(".")[0];
                    const outDir = outputDir(state);
                    fs_1.default.writeFileSync(p.resolve(outDir, `${componentName}.module.css`), css);
                    // metro web handles CSS modules for us
                    fs_1.default.writeFileSync(p.resolve(outDir, `${componentName}.generated-styles.js`), `module.exports=require('./${componentName}.module.css');`);
                    fs_1.default.writeFileSync(p.resolve(outDir, `${componentName}.generated-styles.native.js`), `module.exports=${JSON.stringify(styles)}`);
                    path.parentPath.node.source.value = `./${componentName}.generated-styles`;
                    //path.parentPath.node.source =
                }
            },
        },
    };
}
exports.default = babelPluginReactNativeCssModules;
;
